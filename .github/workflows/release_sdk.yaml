name: Release Android SDK
on:
  workflow_dispatch:
    inputs:
      version_override:
        description: 'The version to release. If not specified, the version will be inferred'
        required: false
        default: ''
      bump_version:
        type: boolean
        description: 'Whether to automatically bump and commit the version after the release'
        required: true
        default: true

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17
      - name: Write Smile Config
        run: |
          echo "$SMILE_CONFIG_PARTNER_002" > sample/src/main/assets/smile_config.json
        env:
          SMILE_CONFIG_PARTNER_002: ${{ secrets.SMILE_CONFIG_PARTNER_002 }}
      - name: Decode Keystore
        id: decode_keystore
        uses: timheuer/base64-to-file@v1
        with:
          fileName: 'upload.jks'
          fileDir: './sample'
          encodedString: ${{ secrets.UPLOAD_KEYSTORE }}
      - name: Read Version
        id: read_version
        run: |
          if [ -n "${{ github.event.inputs.version_override }}" ]; then
            if [[ ${{ github.event.inputs.version_override }} == *-SNAPSHOT ]]; then
              echo "Version cannot end in -SNAPSHOT (${{ github.event.inputs.version_override }})"
              exit 1
            fi
            echo "Using version override: ${{ github.event.inputs.version_override }}"
            version=${{ github.event.inputs.version_override }}
          else
            version=$(cat ./lib/VERSION)
            if [[ $version != *-SNAPSHOT ]]; then
              echo "Version $version from file does not end in -SNAPSHOT"
              exit 1
            fi
            version=${version%-SNAPSHOT}
          fi
          echo "version=$version" >> $GITHUB_OUTPUT
          if [[ $version == *alpha* || $version == *beta* || $version == *rc* ]]; then
              echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
              echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi
      - name: Push Tag
        uses: actions-ecosystem/action-push-tag@v1
        with:
          tag: v${{ steps.read_version.outputs.version }}
          message: "Release ${{ steps.read_version.outputs.version }}"
      - name: Build, Test, and Lint
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build
        env:
          ORG_GRADLE_PROJECT_SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
      - name: Assemble and Publish
        uses: gradle/gradle-build-action@v2
        with:
          arguments: assembleRelease publish
        env:
          ORG_GRADLE_PROJECT_VERSION_NAME: ${{ steps.read_version.outputs.version }}
          ORG_GRADLE_PROJECT_SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.ARTIFACT_GPG_SIGNING_KEY }}
          ORG_GRADLE_PROJECT_signingInMemoryKeyId: ${{ secrets.ARTIFACT_GPG_SIGNING_KEY_ID }}
          ORG_GRADLE_PROJECT_uploadKeystorePassword: ${{ secrets.UPLOAD_KEYSTORE_PASSWORD }}
      - name: Archive SDK AAR
        uses: actions/upload-artifact@v3
        with:
          name: SDK AAR
          path: lib/build/outputs/aar/lib-release.aar
      - name: Archive Sample App
        uses: actions/upload-artifact@v3
        with:
          name: Sample App APK (Partner 002)
          path: sample/build/outputs/apk/release/sample-release.apk
      - name: Create GitHub Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_name: Release ${{ steps.read_version.outputs.version }}
          tag_name: v${{ steps.read_version.outputs.version }}
          prerelease: ${{ steps.read_version.outputs.is_prerelease }}
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: lib/build/outputs/aar/lib-release.aar
          asset_name: com.smileidentity_android-sdk_${{ steps.read_version.outputs.version }}.aar
          asset_content_type: application/octet-stream
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: sample/build/outputs/apk/release/sample-release.apk
          asset_name: sample_partner002_${{ steps.read_version.outputs.version }}.apk
          asset_content_type: application/vnd.android.package-archive
      - name: Deploy Sample App to Play Store Internal Testing Track
        uses: r0adkll/upload-google-play@v1
        id: upload_to_play_store
        with:
          serviceAccountJsonPlainText: ${{ secrets.PLAY_STORE_SERVICE_ACCOUNT_JSON }}
          packageName: com.smileidentity.sample
          track: internal
          releaseFiles: sample/build/outputs/apk/release/sample-release.apk
          releaseName: Smile ID (Partner 002)
      - name: Bump Version
        if: ${{ github.event.inputs.bump_version == 'true' }}
        run: |
          version=${{ steps.read_version.outputs.version }}
          is_prerelease=${{ steps.read_version.outputs.is_prerelease }}
          major=$(echo $version | cut -d. -f1)
          minor=$(echo $version | cut -d. -f2)
          patch=$(echo $version | cut -d. -f3)
          if [[ $is_prerelease == "true" ]]; then
            prerelease=$(echo $version | cut -d- -f2)
            prerelease_number=$(echo $prerelease | cut -d0 -f2)
            new_prerelease_number=$((prerelease_number + 1))
            new_prerelease=$(echo $prerelease | sed "s/$prerelease_number/$new_prerelease_number/")
            new_version="$major.$minor.$patch-$new_prerelease"
          else
            patch=$((patch + 1))
            new_version="$major.$minor.$patch-SNAPSHOT"
          fi
          echo $new_version > ./lib/VERSION
          git config --local user.email "${{ github.actor }}@users.noreply.github.com"
          git config --local user.name "${{ github.actor }}"
          git add VERSION
          git commit -m "Prepare for next development iteration"
          git push

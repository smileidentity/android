package com.smileidentity.sample.viewmodel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.smileidentity.SmileID
import com.smileidentity.getExceptionHandler
import com.smileidentity.models.AuthenticationRequest
import com.smileidentity.models.JobType
import com.smileidentity.models.ProductsConfigRequest
import com.smileidentity.randomUserId
import com.smileidentity.sample.compose.SearchableInputFieldItem
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch
import timber.log.Timber

data class DocumentSelectorUiState(
    val idTypes: Map<String, List<String>>? = null,
    val errorMessage: String? = null,
)

class DocumentSelectorViewModel : ViewModel() {
    private val _uiState = MutableStateFlow(DocumentSelectorUiState())
    val uiState = _uiState.asStateFlow()

    init {
        loadData()
    }

    private fun loadData() {
        val proxy = { e: Throwable ->
            Timber.e(e)
            _uiState.update { it.copy(errorMessage = e.message) }
        }
        viewModelScope.launch(getExceptionHandler(proxy)) {
            val authRequest = AuthenticationRequest(
                userId = randomUserId(),
                jobType = JobType.DocumentVerification,
            )
            val authResponse = SmileID.api.authenticate(authRequest)
            val productsConfigRequest = ProductsConfigRequest(
                partnerId = SmileID.config.partnerId,
                timestamp = authResponse.timestamp,
                signature = authResponse.signature,
            )
            val productsConfigResponse = SmileID.api.getProductsConfig(productsConfigRequest)
            _uiState.update {
                it.copy(idTypes = productsConfigResponse.idSelection.documentVerification)
            }
        }
    }
}

val countryDetails = mapOf(
    "AO" to SearchableInputFieldItem("AO", "Angola", "ğŸ‡¦ğŸ‡´"),
    "BF" to SearchableInputFieldItem("BF", "Burkina Faso", "ğŸ‡§ğŸ‡«"),
    "BI" to SearchableInputFieldItem("BI", "Burundi", "ğŸ‡§ğŸ‡®"),
    "BJ" to SearchableInputFieldItem("BJ", "Benin", "ğŸ‡§ğŸ‡¯"),
    "BW" to SearchableInputFieldItem("BW", "Botswana", "ğŸ‡§ğŸ‡¼"),
    "CD" to SearchableInputFieldItem("CD", "Congo (DRC)", "ğŸ‡¨ğŸ‡©"),
    "CF" to SearchableInputFieldItem("CF", "Central African Republic", "ğŸ‡¨ğŸ‡«"),
    "CG" to SearchableInputFieldItem("CG", "Congo", "ğŸ‡¨ğŸ‡¬"),
    "CI" to SearchableInputFieldItem("CI", "CÃ´te d'Ivoire", "ğŸ‡¨ğŸ‡®"),
    "CM" to SearchableInputFieldItem("CM", "Cameroon", "ğŸ‡¨ğŸ‡²"),
    "CV" to SearchableInputFieldItem("CV", "Cabo Verde", "ğŸ‡¨ğŸ‡»"),
    "DJ" to SearchableInputFieldItem("DJ", "Djibouti", "ğŸ‡©ğŸ‡¯"),
    "EG" to SearchableInputFieldItem("EG", "Egypt", "ğŸ‡ªğŸ‡¬"),
    "EH" to SearchableInputFieldItem("EH", "Western Sahara", "ğŸ‡ªğŸ‡­"),
    "ER" to SearchableInputFieldItem("ER", "Eritrea", "ğŸ‡ªğŸ‡·"),
    "ET" to SearchableInputFieldItem("ET", "Ethiopia", "ğŸ‡ªğŸ‡¹"),
    "GA" to SearchableInputFieldItem("GA", "Gabon", "ğŸ‡¬ğŸ‡¦"),
    "GH" to SearchableInputFieldItem("GH", "Ghana", "ğŸ‡¬ğŸ‡­"),
    "GM" to SearchableInputFieldItem("GM", "Gambia", "ğŸ‡¬ğŸ‡²"),
    "GN" to SearchableInputFieldItem("GN", "Guinea", "ğŸ‡¬ğŸ‡³"),
    "GQ" to SearchableInputFieldItem("GQ", "Equatorial Guinea", "ğŸ‡¬ğŸ‡¶"),
    "GW" to SearchableInputFieldItem("GW", "Guinea-Bissau", "ğŸ‡¬ğŸ‡¼"),
    "KE" to SearchableInputFieldItem("KE", "Kenya", "ğŸ‡°ğŸ‡ª"),
    "KM" to SearchableInputFieldItem("KM", "Comoros", "ğŸ‡°ğŸ‡²"),
    "LR" to SearchableInputFieldItem("LR", "Liberia", "ğŸ‡±ğŸ‡·"),
    "LS" to SearchableInputFieldItem("LS", "Lesotho", "ğŸ‡±ğŸ‡¸"),
    "LY" to SearchableInputFieldItem("LY", "Libya", "ğŸ‡±ğŸ‡¾"),
    "MA" to SearchableInputFieldItem("MA", "Morocco", "ğŸ‡²ğŸ‡¦"),
    "MG" to SearchableInputFieldItem("MG", "Madagascar", "ğŸ‡²ğŸ‡¬"),
    "ML" to SearchableInputFieldItem("ML", "Mali", "ğŸ‡²ğŸ‡±"),
    "MR" to SearchableInputFieldItem("MR", "Mauritania", "ğŸ‡²ğŸ‡·"),
    "MU" to SearchableInputFieldItem("MU", "Mauritius", "ğŸ‡²ğŸ‡º"),
    "MW" to SearchableInputFieldItem("MW", "Malawi", "ğŸ‡²ğŸ‡¼"),
    "MZ" to SearchableInputFieldItem("MZ", "Mozambique", "ğŸ‡²ğŸ‡¿"),
    "NA" to SearchableInputFieldItem("NA", "Namibia", "ğŸ‡³ğŸ‡¦"),
    "NE" to SearchableInputFieldItem("NE", "Niger", "ğŸ‡³ğŸ‡ª"),
    "NG" to SearchableInputFieldItem("NG", "Nigeria", "ğŸ‡³ğŸ‡¬"),
    "RW" to SearchableInputFieldItem("RW", "Rwanda", "ğŸ‡·ğŸ‡¼"),
    "SC" to SearchableInputFieldItem("SC", "Seychelles", "ğŸ‡¸ğŸ‡¨"),
    "SD" to SearchableInputFieldItem("SD", "Sudan", "ğŸ‡¸ğŸ‡©"),
    "SL" to SearchableInputFieldItem("SL", "Sierra Leone", "ğŸ‡¸ğŸ‡±"),
    "SN" to SearchableInputFieldItem("SN", "Senegal", "ğŸ‡¸ğŸ‡³"),
    "SO" to SearchableInputFieldItem("SO", "Somalia", "ğŸ‡¸ğŸ‡´"),
    "SS" to SearchableInputFieldItem("SS", "South Sudan", "ğŸ‡¸ğŸ‡¸"),
    "ST" to SearchableInputFieldItem("ST", "SÃ£o TomÃ© and PrÃ­ncipe", "ğŸ‡¸ğŸ‡¹"),
    "SZ" to SearchableInputFieldItem("SZ", "Eswatini", "ğŸ‡¸ğŸ‡¿"),
    "TD" to SearchableInputFieldItem("TD", "Chad", "ğŸ‡¹ğŸ‡©"),
    "TG" to SearchableInputFieldItem("TG", "Togo", "ğŸ‡¹ğŸ‡¬"),
    "TN" to SearchableInputFieldItem("TN", "Tunisia", "ğŸ‡¹ğŸ‡³"),
    "TZ" to SearchableInputFieldItem("TZ", "Tanzania", "ğŸ‡¹ğŸ‡¿"),
    "UG" to SearchableInputFieldItem("UG", "Uganda", "ğŸ‡ºğŸ‡¬"),
    "ZA" to SearchableInputFieldItem("ZA", "South Africa", "ğŸ‡¿ğŸ‡¦"),
    "ZM" to SearchableInputFieldItem("ZM", "Zambia", "ğŸ‡¿ğŸ‡²"),
    "ZW" to SearchableInputFieldItem("ZW", "Zimbabwe", "ğŸ‡¿ğŸ‡¼"),
)

val idTypeFriendlyNames = mapOf(
    "ALIEN_CARD" to "Alien Card",
    "BANK_ACCOUNT" to "Bank Account",
    "BVN" to "BVN",
    "CAC" to "CAC",
    "DRIVERS_LICENSE" to "Driver's License",
    "KRA_PIN" to "KRA PIN",
    "NATIONAL_ID" to "National ID",
    "NATIONAL_ID_NO_PHOTO" to "National ID (No Photo)",
    "NEW_VOTER_ID" to "New Voter ID",
    "NIN_SLIP" to "NIN Slip",
    "NIN_V2" to "NIN v2",
    "PASSPORT" to "Passport",
    "PHONE_NUMBER" to "Phone Number",
    "SSNIT" to "SSNIT",
    "TIN" to "TIN",
    "VOTER_ID" to "Voter ID",
    "V_NIN" to "Virtual NIN",
)

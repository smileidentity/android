package com.smileidentity.sample

import android.content.Context
import android.net.ConnectivityManager
import android.net.NetworkCapabilities
import android.os.Build
import android.widget.Toast
import androidx.annotation.StringRes
import androidx.compose.material3.SnackbarHostState
import androidx.compose.material3.SnackbarResult
import com.smileidentity.models.JobType
import com.smileidentity.sample.compose.components.SearchableInputFieldItem
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.launch

fun Context.toast(message: String) {
    Toast.makeText(this, message, Toast.LENGTH_LONG).show()
}

fun Context.toast(@StringRes message: Int) {
    Toast.makeText(this, message, Toast.LENGTH_LONG).show()
}

// From https://stackoverflow.com/a/70510760
fun Context.isInternetAvailable(): Boolean {
    var result = false
    val connectivityManager = getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
        val networkCapabilities = connectivityManager.activeNetwork ?: return false
        val actNw =
            connectivityManager.getNetworkCapabilities(networkCapabilities) ?: return false
        result = when {
            actNw.hasTransport(NetworkCapabilities.TRANSPORT_WIFI) -> true
            actNw.hasTransport(NetworkCapabilities.TRANSPORT_CELLULAR) -> true
            actNw.hasTransport(NetworkCapabilities.TRANSPORT_ETHERNET) -> true
            else -> false
        }
    } else {
        connectivityManager.run {
            @Suppress("DEPRECATION")
            connectivityManager.activeNetworkInfo?.run {
                result = when (type) {
                    ConnectivityManager.TYPE_WIFI -> true
                    ConnectivityManager.TYPE_MOBILE -> true
                    ConnectivityManager.TYPE_ETHERNET -> true
                    else -> false
                }
            }
        }
    }
    return result
}

fun SnackbarHostState.showSnackbar(
    scope: CoroutineScope,
    message: String,
    actionLabel: String? = null,
    action: (() -> Unit)? = null,
) {
    scope.launch {
        val result = showSnackbar(message, actionLabel, withDismissAction = true)
        if (result == SnackbarResult.ActionPerformed) {
            action?.invoke()
        }
    }
}

/**
 * Builds a display message for a job result. Since each job type has a different response type,
 * we need the individual fields rather than the overarching response type. Not all job types return
 * all fields, hence their nullability
 */
fun jobResultMessageBuilder(
    jobName: String,
    jobComplete: Boolean?,
    jobSuccess: Boolean?,
    code: String?,
    resultCode: String?,
    resultText: String?,
    suffix: String? = null,
): String {
    val message = StringBuilder("$jobName ")
    if (jobComplete == true) {
        if (jobSuccess == true) {
            message.append("completed successfully")
        } else {
            message.append("completed unsuccessfully")
        }
        message.append(" (resultText=$resultText, code=$code, resultCode=$resultCode)")
    } else {
        message.append("still pending")
    }
    suffix?.let { message.append(" $it") }
    return message.toString()
}

@Suppress("ktlint:standard:max-line-length")
val JobType.label: Int
    @StringRes
    get() = when (this) {
        JobType.SmartSelfieEnrollment -> com.smileidentity.R.string.si_smart_selfie_enrollment_product_name
        JobType.SmartSelfieAuthentication -> com.smileidentity.R.string.si_smart_selfie_authentication_product_name
        JobType.EnhancedKyc -> R.string.enhanced_kyc_product_name
        JobType.BiometricKyc -> com.smileidentity.R.string.si_biometric_kyc_product_name
        JobType.DocumentVerification -> com.smileidentity.R.string.si_doc_v_product_name
        JobType.BVN -> com.smileidentity.R.string.si_bvn_product_name
        JobType.EnhancedDocumentVerification -> com.smileidentity.R.string.si_enhanced_docv_product_name
        JobType.Unknown -> -1
    }

val countryDetails = mapOf(
    "AO" to SearchableInputFieldItem("AO", "Angola", "ğŸ‡¦ğŸ‡´"),
    "BF" to SearchableInputFieldItem("BF", "Burkina Faso", "ğŸ‡§ğŸ‡«"),
    "BI" to SearchableInputFieldItem("BI", "Burundi", "ğŸ‡§ğŸ‡®"),
    "BJ" to SearchableInputFieldItem("BJ", "Benin", "ğŸ‡§ğŸ‡¯"),
    "BW" to SearchableInputFieldItem("BW", "Botswana", "ğŸ‡§ğŸ‡¼"),
    "CD" to SearchableInputFieldItem("CD", "Congo (DRC)", "ğŸ‡¨ğŸ‡©"),
    "CF" to SearchableInputFieldItem("CF", "Central African Republic", "ğŸ‡¨ğŸ‡«"),
    "CG" to SearchableInputFieldItem("CG", "Congo", "ğŸ‡¨ğŸ‡¬"),
    "CI" to SearchableInputFieldItem("CI", "CÃ´te d'Ivoire", "ğŸ‡¨ğŸ‡®"),
    "CM" to SearchableInputFieldItem("CM", "Cameroon", "ğŸ‡¨ğŸ‡²"),
    "CV" to SearchableInputFieldItem("CV", "Cabo Verde", "ğŸ‡¨ğŸ‡»"),
    "DJ" to SearchableInputFieldItem("DJ", "Djibouti", "ğŸ‡©ğŸ‡¯"),
    "EG" to SearchableInputFieldItem("EG", "Egypt", "ğŸ‡ªğŸ‡¬"),
    "EH" to SearchableInputFieldItem("EH", "Western Sahara", "ğŸ‡ªğŸ‡­"),
    "ER" to SearchableInputFieldItem("ER", "Eritrea", "ğŸ‡ªğŸ‡·"),
    "ET" to SearchableInputFieldItem("ET", "Ethiopia", "ğŸ‡ªğŸ‡¹"),
    "GA" to SearchableInputFieldItem("GA", "Gabon", "ğŸ‡¬ğŸ‡¦"),
    "GH" to SearchableInputFieldItem("GH", "Ghana", "ğŸ‡¬ğŸ‡­"),
    "GM" to SearchableInputFieldItem("GM", "Gambia", "ğŸ‡¬ğŸ‡²"),
    "GN" to SearchableInputFieldItem("GN", "Guinea", "ğŸ‡¬ğŸ‡³"),
    "GQ" to SearchableInputFieldItem("GQ", "Equatorial Guinea", "ğŸ‡¬ğŸ‡¶"),
    "GW" to SearchableInputFieldItem("GW", "Guinea-Bissau", "ğŸ‡¬ğŸ‡¼"),
    "KE" to SearchableInputFieldItem("KE", "Kenya", "ğŸ‡°ğŸ‡ª"),
    "KM" to SearchableInputFieldItem("KM", "Comoros", "ğŸ‡°ğŸ‡²"),
    "LR" to SearchableInputFieldItem("LR", "Liberia", "ğŸ‡±ğŸ‡·"),
    "LS" to SearchableInputFieldItem("LS", "Lesotho", "ğŸ‡±ğŸ‡¸"),
    "LY" to SearchableInputFieldItem("LY", "Libya", "ğŸ‡±ğŸ‡¾"),
    "MA" to SearchableInputFieldItem("MA", "Morocco", "ğŸ‡²ğŸ‡¦"),
    "MG" to SearchableInputFieldItem("MG", "Madagascar", "ğŸ‡²ğŸ‡¬"),
    "ML" to SearchableInputFieldItem("ML", "Mali", "ğŸ‡²ğŸ‡±"),
    "MR" to SearchableInputFieldItem("MR", "Mauritania", "ğŸ‡²ğŸ‡·"),
    "MU" to SearchableInputFieldItem("MU", "Mauritius", "ğŸ‡²ğŸ‡º"),
    "MW" to SearchableInputFieldItem("MW", "Malawi", "ğŸ‡²ğŸ‡¼"),
    "MZ" to SearchableInputFieldItem("MZ", "Mozambique", "ğŸ‡²ğŸ‡¿"),
    "NA" to SearchableInputFieldItem("NA", "Namibia", "ğŸ‡³ğŸ‡¦"),
    "NE" to SearchableInputFieldItem("NE", "Niger", "ğŸ‡³ğŸ‡ª"),
    "NG" to SearchableInputFieldItem("NG", "Nigeria", "ğŸ‡³ğŸ‡¬"),
    "RW" to SearchableInputFieldItem("RW", "Rwanda", "ğŸ‡·ğŸ‡¼"),
    "SC" to SearchableInputFieldItem("SC", "Seychelles", "ğŸ‡¸ğŸ‡¨"),
    "SD" to SearchableInputFieldItem("SD", "Sudan", "ğŸ‡¸ğŸ‡©"),
    "SL" to SearchableInputFieldItem("SL", "Sierra Leone", "ğŸ‡¸ğŸ‡±"),
    "SN" to SearchableInputFieldItem("SN", "Senegal", "ğŸ‡¸ğŸ‡³"),
    "SO" to SearchableInputFieldItem("SO", "Somalia", "ğŸ‡¸ğŸ‡´"),
    "SS" to SearchableInputFieldItem("SS", "South Sudan", "ğŸ‡¸ğŸ‡¸"),
    "ST" to SearchableInputFieldItem("ST", "SÃ£o TomÃ© and PrÃ­ncipe", "ğŸ‡¸ğŸ‡¹"),
    "SZ" to SearchableInputFieldItem("SZ", "Eswatini", "ğŸ‡¸ğŸ‡¿"),
    "TD" to SearchableInputFieldItem("TD", "Chad", "ğŸ‡¹ğŸ‡©"),
    "TG" to SearchableInputFieldItem("TG", "Togo", "ğŸ‡¹ğŸ‡¬"),
    "TN" to SearchableInputFieldItem("TN", "Tunisia", "ğŸ‡¹ğŸ‡³"),
    "TZ" to SearchableInputFieldItem("TZ", "Tanzania", "ğŸ‡¹ğŸ‡¿"),
    "UG" to SearchableInputFieldItem("UG", "Uganda", "ğŸ‡ºğŸ‡¬"),
    "ZA" to SearchableInputFieldItem("ZA", "South Africa", "ğŸ‡¿ğŸ‡¦"),
    "ZM" to SearchableInputFieldItem("ZM", "Zambia", "ğŸ‡¿ğŸ‡²"),
    "ZW" to SearchableInputFieldItem("ZW", "Zimbabwe", "ğŸ‡¿ğŸ‡¼"),
)
